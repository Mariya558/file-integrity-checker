import hashlib
import os
import json
import argparse
from pathlib import Path

HASH_DB_FILE = 'hashes.json'

def calculate_hash(file_path):
    """Calculate SHA256 hash of a file."""
    sha256 = hashlib.sha256()
    try:
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b""):
                sha256.update(chunk)
        return sha256.hexdigest()
    except FileNotFoundError:
        return None

def load_hash_db():
    """Load hash database from a JSON file."""
    if Path(HASH_DB_FILE).exists():
        with open(HASH_DB_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_hash_db(hash_db):
    """Save hash database to a JSON file."""
    with open(HASH_DB_FILE, 'w') as f:
        json.dump(hash_db, f, indent=4)

def initialize(file_paths):
    """Initialize hash values for provided files."""
    hash_db = {}
    for file_path in file_paths:
        hash_val = calculate_hash(file_path)
        if hash_val:
            hash_db[file_path] = hash_val
            print(f"Initialized: {file_path}")
        else:
            print(f"File not found: {file_path}")
    save_hash_db(hash_db)

def check_integrity():
    """Check current file hashes against stored values."""
    hash_db = load_hash_db()
    for file_path, stored_hash in hash_db.items():
        current_hash = calculate_hash(file_path)
        if current_hash is None:
            print(f"[MISSING] {file_path}")
        elif current_hash != stored_hash:
            print(f"[CHANGED] {file_path}")
        else:
            print(f"[OK] {file_path}")

def main():
    parser = argparse.ArgumentParser(description="File Integrity Monitor using SHA256.")
    parser.add_argument('--init', nargs='+', help="Initialize hash values for given files.")
    parser.add_argument('--check', action='store_true', help="Check integrity of files.")
    args = parser.parse_args()

    if args.init:
        initialize(args.init)
    elif args.check:
        check_integrity()
    else:
        parser.print_help()

if __name__ == '__main__':
    main()
